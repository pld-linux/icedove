--- icedove-3.1/mozilla/configure.in	2010-06-23 20:43:07.000000000 +0300
+++ icedove-3.1/mozilla/configure.in	2010-07-23 12:00:43.318986326 +0300
@@ -67,6 +67,9 @@
 
 AC_PREREQ(2.13)
 AC_INIT(config/config.mk)
+dnl MOZ_READ_MOZCONFIG([.])
+_AUTOCONF_TOOLS_DIR="`dirname [$]0`/mozilla/build/autoconf"
+. `dirname [$]0`/mozilla/build/autoconf/mozconfig2configure
 MOZILLA_SRCDIR=$topsrcdir/mozilla
 AC_CONFIG_AUX_DIR(${MOZILLA_SRCDIR}/build/autoconf)
 AC_CANONICAL_SYSTEM
@@ -375,7 +378,8 @@
 
     AC_MSG_CHECKING([whether the host c compiler ($HOST_CC $HOST_CFLAGS $HOST_LDFLAGS) works])
     AC_TRY_COMPILE([], [return(0);], 
-	[ac_cv_prog_hostcc_works=1 AC_MSG_RESULT([yes])],
+	[ac_cv_prog_hostcc_works=1
+    AC_MSG_RESULT([yes])],
 	AC_MSG_ERROR([installation or configuration problem: host compiler $HOST_CC cannot create executables.]) )
 
     CC="$HOST_CXX"
@@ -383,7 +387,8 @@
 
     AC_MSG_CHECKING([whether the host c++ compiler ($HOST_CXX $HOST_CXXFLAGS $HOST_LDFLAGS) works])
     AC_TRY_COMPILE([], [return(0);], 
-	[ac_cv_prog_hostcxx_works=1 AC_MSG_RESULT([yes])],
+	[ac_cv_prog_hostcxx_works=1
+    AC_MSG_RESULT([yes])],
 	AC_MSG_ERROR([installation or configuration problem: host compiler $HOST_CXX cannot create executables.]) )
     
     CC=$_SAVE_CC
@@ -579,17 +584,17 @@
         # Make sure compilers are valid
         CFLAGS="$CFLAGS -TC -nologo"
         CXXFLAGS="$CXXFLAGS -TP -nologo"
-        AC_LANG_SAVE
-        AC_LANG_C
+        AC_LANG_PUSH([C])
         AC_TRY_COMPILE([#include <stdio.h>],
             [ printf("Hello World\n"); ],,
             AC_MSG_ERROR([\$(CC) test failed.  You must have MS VC++ in your path to build.]) )
+        AC_LANG_POP
 
-        AC_LANG_CPLUSPLUS
+        AC_LANG_PUSH([C++])
         AC_TRY_COMPILE([#include <new.h>],
             [ unsigned *test = new unsigned(42); ],,
             AC_MSG_ERROR([\$(CXX) test failed.  You must have MS VC++ in your path to build.]) )
-        AC_LANG_RESTORE
+        AC_LANG_POP
         
         changequote(,)
         _MSVC_VER_FILTER='s|.* ([0-9]+\.[0-9]+\.[0-9]+(\.[0-9]+)?).*|\1|p'
@@ -1051,14 +1056,13 @@
     fi
   fi
 
-  AC_LANG_SAVE
   AC_MSG_CHECKING([for valid compiler/Mac OS X SDK combination])
-  AC_LANG_CPLUSPLUS
+  AC_LANG_PUSH([C++])
   AC_TRY_COMPILE([#include <new>
                  int main() { return 0; }],
    result=yes,
    result=no)
-  AC_LANG_RESTORE
+  AC_LANG_POP
   AC_MSG_RESULT($result)
 
   if test "$result" = "no" ; then
@@ -1079,6 +1083,9 @@
 dnl ========================================================
 dnl set the defaults first
 dnl ========================================================
+m4_pattern_allow([AS_BIN])
+m4_pattern_allow([AS_DASH_C_FLAG])
+m4_pattern_allow([AS_PERL])
 AS_BIN=$AS
 AR_FLAGS='cr $@'
 AR_LIST='$(AR) t'
@@ -1547,8 +1554,7 @@
     AC_CACHE_CHECK(whether the compiler supports -Wno-invalid-offsetof,
                    ac_has_wno_invalid_offsetof,
         [
-            AC_LANG_SAVE
-            AC_LANG_CPLUSPLUS
+            AC_LANG_PUSH([C++])
             _SAVE_CXXFLAGS="$CXXFLAGS"
             CXXFLAGS="$CXXFLAGS ${_COMPILER_PREFIX}-Wno-invalid-offsetof"
             AC_TRY_COMPILE([],
@@ -1556,7 +1562,7 @@
                            ac_has_wno_invalid_offsetof="yes",
                            ac_has_wno_invalid_offsetof="no")
             CXXFLAGS="$_SAVE_CXXFLAGS"
-            AC_LANG_RESTORE
+            AC_LANG_POP
         ])
     if test "$ac_has_wno_invalid_offsetof" = "yes"; then
         _WARNINGS_CXXFLAGS="${_WARNINGS_CXXFLAGS} ${_COMPILER_PREFIX}-Wno-invalid-offsetof"
@@ -1565,8 +1571,7 @@
     AC_CACHE_CHECK(whether the compiler supports -Wno-variadic-macros,
                    ac_has_wno_variadic_macros,
         [
-            AC_LANG_SAVE
-            AC_LANG_CPLUSPLUS
+            AC_LANG_PUSH([C++])
             _SAVE_CXXFLAGS="$CXXFLAGS"
             CXXFLAGS="$CXXFLAGS ${_COMPILER_PREFIX}-Wno-variadic-macros"
             AC_TRY_COMPILE([],
@@ -1574,7 +1579,7 @@
                            ac_has_wno_variadic_macros="yes",
                            ac_has_wno_variadic_macros="no")
             CXXFLAGS="$_SAVE_CXXFLAGS"
-            AC_LANG_RESTORE
+            AC_LANG_POP
         ])
     if test "$ac_has_wno_variadic_macros" = "yes"; then
         _WARNINGS_CXXFLAGS="${_WARNINGS_CXXFLAGS} ${_COMPILER_PREFIX}-Wno-variadic-macros"
@@ -1583,8 +1588,7 @@
     AC_CACHE_CHECK(whether the compiler supports -Werror=return-type,
                    ac_has_werror_return_type,
         [
-            AC_LANG_SAVE
-            AC_LANG_CPLUSPLUS
+            AC_LANG_PUSH([C++])
             _SAVE_CXXFLAGS="$CXXFLAGS"
             CXXFLAGS="$CXXFLAGS -Werror=return-type"
             AC_TRY_COMPILE([],
@@ -1592,7 +1596,7 @@
                            ac_has_werror_return_type="yes",
                            ac_has_werror_return_type="no")
             CXXFLAGS="$_SAVE_CXXFLAGS"
-            AC_LANG_RESTORE
+            AC_LANG_POP
         ])
     if test "$ac_has_werror_return_type" = "yes"; then
         _WARNINGS_CXXFLAGS="${_WARNINGS_CXXFLAGS} -Werror=return-type"
@@ -1656,8 +1660,8 @@
 dnl test that the macros actually work:
 AC_MSG_CHECKING(that static assertion macros used in autoconf tests work)
 AC_CACHE_VAL(ac_cv_static_assertion_macros_work,
- [AC_LANG_SAVE
-  AC_LANG_C
+ [
+  AC_LANG_PUSH([C])
   ac_cv_static_assertion_macros_work="yes"
   AC_TRY_COMPILE([$configure_static_assert_macros],
                  [CONFIGURE_STATIC_ASSERT(1)],
@@ -1667,7 +1671,8 @@
                  [CONFIGURE_STATIC_ASSERT(0)],
                  ac_cv_static_assertion_macros_work="no",
                  )
-  AC_LANG_CPLUSPLUS
+  AC_LANG_POP
+  AC_LANG_PUSH([C++])
   AC_TRY_COMPILE([$configure_static_assert_macros],
                  [CONFIGURE_STATIC_ASSERT(1)],
                  ,
@@ -1676,7 +1681,7 @@
                  [CONFIGURE_STATIC_ASSERT(0)],
                  ac_cv_static_assertion_macros_work="no",
                  )
-  AC_LANG_RESTORE
+  AC_LANG_POP
  ])
 AC_MSG_RESULT("$ac_cv_static_assertion_macros_work")
 if test "$ac_cv_static_assertion_macros_work" = "no"; then
@@ -1688,8 +1693,7 @@
 dnl Checking for 64-bit OS
 dnl ========================================================
 if test "$COMPILE_ENVIRONMENT"; then
-AC_LANG_SAVE
-AC_LANG_C
+AC_LANG_PUSH([C])
 AC_MSG_CHECKING(for 64-bit OS)
 AC_TRY_COMPILE([$configure_static_assert_macros],
                [CONFIGURE_STATIC_ASSERT(sizeof(void*) == 8)],
@@ -1700,7 +1704,7 @@
     HAVE_64BIT_OS=1
 fi
 AC_SUBST(HAVE_64BIT_OS)
-AC_LANG_RESTORE
+AC_LANG_POP
 fi # COMPILE_ENVIRONMENT
 
 dnl ========================================================
@@ -1830,8 +1834,7 @@
         MKSHLIB='$(CXX) $(DSO_LDOPTS) -o $@'
         MKCSHLIB='$(CC) $(DSO_LDOPTS) -o $@'
         if test "$COMPILE_ENVIRONMENT"; then
-            AC_LANG_SAVE
-            AC_LANG_CPLUSPLUS
+            AC_LANG_PUSH([C++])
             AC_MSG_CHECKING([for VisualAge C++ compiler version >= 6.0.0.3])
             AC_TRY_COMPILE([],
                 [#if (__IBMCPP__ < 600)
@@ -1844,7 +1847,7 @@
             else
                 AC_MSG_RESULT([yes])    
             fi
-            AC_LANG_RESTORE
+            AC_LANG_POP
             TARGET_COMPILER_ABI="ibmc"
             CC_VERSION=`lslpp -Lcq vac.C 2>/dev/null | awk -F: '{ print $3 }'`
             CXX_VERSION=`lslpp -Lcq vacpp.cmp.core 2>/dev/null | awk -F: '{ print $3 }'`
@@ -2682,8 +2685,7 @@
        CC_VERSION=`$CC -V 2>&1 | grep '^cc:' 2>/dev/null | $AWK -F\: '{ print $2 }'`
        CXX_VERSION=`$CXX -V 2>&1 | grep '^CC:' 2>/dev/null | $AWK -F\: '{ print $2 }'`
        AC_MSG_CHECKING([for Sun C++ compiler version >= 5.9])
-       AC_LANG_SAVE
-       AC_LANG_CPLUSPLUS
+       AC_LANG_PUSH([C++])
        AC_TRY_COMPILE([],
            [#if (__SUNPRO_CC < 0x590)
            #error "Denied"
@@ -2696,7 +2698,7 @@
             _res="yes"
         fi
         AC_MSG_RESULT([$_res])
-        AC_LANG_RESTORE
+        AC_LANG_POP
     else
        ASFLAGS="$ASFLAGS -fPIC"
        DSO_LDOPTS='-G'
@@ -2808,7 +2810,7 @@
 if test -z "$SKIP_COMPILER_CHECKS"; then
 dnl Checks for typedefs, structures, and compiler characteristics.
 dnl ========================================================
-AC_LANG_C
+AC_LANG_PUSH([C])
 AC_HEADER_STDC
 AC_C_CONST
 AC_TYPE_MODE_T
@@ -2923,11 +2925,12 @@
 else
   AC_MSG_RESULT(no)
 fi
+AC_LANG_POP
 
 dnl On the gcc trunk (as of 2001-02-09) _GNU_SOURCE, and thus __USE_GNU,
 dnl are defined when compiling C++ but not C.  Since the result of this
 dnl test is used only in C++, do it in C++.
-AC_LANG_CPLUSPLUS
+AC_LANG_PUSH([C++])
 
 AC_MSG_CHECKING(for uname.domainname)
 AC_CACHE_VAL(ac_cv_have_uname_domainname_field,
@@ -3019,8 +3022,7 @@
         CXXFLAGS=$_SAVE_CXXFLAGS
     fi
 fi
-
-AC_LANG_C
+AC_LANG_POP
 
 dnl Check for .hidden assembler directive and visibility attribute.
 dnl Borrowed from glibc configure.in
@@ -3168,11 +3170,11 @@
 
 dnl Check whether the compiler supports the new-style C++ standard
 dnl library headers (i.e. <new>) or needs the old "new.h"
-AC_LANG_CPLUSPLUS
+AC_LANG_PUSH([C++])
 NEW_H=new.h
 AC_CHECK_HEADER(new, [NEW_H=new])
 AC_DEFINE_UNQUOTED(NEW_H, <$NEW_H>)
-AC_LANG_C
+AC_LANG_POP
 
 AC_ARG_ENABLE(dtrace,
               [  --enable-dtrace         build with dtrace support if available (default=no)],
@@ -3220,10 +3222,11 @@
     ;;
 *)
     AC_CHECK_LIB(m, atan)
-    AC_CHECK_LIB(dl, dlopen,
-    AC_CHECK_HEADER(dlfcn.h, 
+    AC_CHECK_LIB(dl, dlopen, [
+    AC_CHECK_HEADER(dlfcn.h, [
         LIBS="-ldl $LIBS"
-        ))
+        ])
+    ])
     ;;
 esac
 
@@ -3490,8 +3493,7 @@
 dnl check for wcrtomb/mbrtowc
 dnl =======================================================================
 if test -z "$MACOS_DEPLOYMENT_TARGET" || test "$MACOS_DEPLOYMENT_TARGET" -ge "100300"; then
-AC_LANG_SAVE
-AC_LANG_CPLUSPLUS
+AC_LANG_PUSH([C++])
 AC_CACHE_CHECK(for wcrtomb,
     ac_cv_have_wcrtomb,
     [AC_TRY_LINK([#include <wchar.h>],
@@ -3510,7 +3512,7 @@
 if test "$ac_cv_have_mbrtowc" = "yes"; then
     AC_DEFINE(HAVE_MBRTOWC)
 fi
-AC_LANG_RESTORE
+AC_LANG_POP
 fi
 
 AC_CACHE_CHECK(
@@ -3535,7 +3537,7 @@
 dnl        AC_CHECK_LIB(resolv, res_ninit, AC_DEFINE(HAVE_RES_NINIT)))
 fi
 
-AC_LANG_CPLUSPLUS
+AC_LANG_PUSH([C++])
 AC_CACHE_CHECK(
     [for gnu_get_libc_version()],
     ac_cv_func_gnu_get_libc_version,
@@ -3613,7 +3615,7 @@
 
 AM_LANGINFO_CODESET
 
-AC_LANG_C
+AC_LANG_POP
 
 dnl **********************
 dnl *** va_copy checks ***
@@ -3776,7 +3778,7 @@
 dnl ========================================================
 dnl Put your C++ language/feature checks below
 dnl ========================================================
-AC_LANG_CPLUSPLUS
+AC_LANG_PUSH([C++])
 
 HAVE_GCC3_ABI=
 if test "$GNU_CC"; then
@@ -4150,7 +4152,7 @@
                                ac_cv_attribute_noreturn=no)])
 
 dnl End of C++ language/feature checks
-AC_LANG_C
+AC_LANG_POP
 
 dnl ========================================================
 dnl =  Internationalization checks
@@ -6300,10 +6302,9 @@
     MOZ_ENABLE_OLD_ABI_COMPAT_WRAPPERS= )
 if test "$COMPILE_ENVIRONMENT"; then
 if test "$MOZ_ENABLE_OLD_ABI_COMPAT_WRAPPERS"; then
-    AC_LANG_SAVE
-    AC_LANG_CPLUSPLUS
+    AC_LANG_PUSH([C++])
     AC_CHECK_FUNCS(__builtin_vec_new __builtin_vec_delete __builtin_new __builtin_delete __pure_virtual)
-    AC_LANG_RESTORE
+    AC_LANG_POP
     AC_DEFINE(MOZ_ENABLE_OLD_ABI_COMPAT_WRAPPERS)
 fi
 fi # COMPILE_ENVIRONMENT
@@ -6397,10 +6398,9 @@
 dnl = Support for demangling undefined symbols
 dnl ========================================================
 if test -z "$SKIP_LIBRARY_CHECKS"; then
-    AC_LANG_SAVE
-    AC_LANG_CPLUSPLUS
+    AC_LANG_PUSH([C++])
     AC_CHECK_FUNCS(__cxa_demangle, HAVE_DEMANGLE=1, HAVE_DEMANGLE=)
-    AC_LANG_RESTORE
+    AC_LANG_POP
 fi
 
 # Demangle only for debug or trace-malloc builds
@@ -6640,7 +6640,7 @@
 AC_SUBST(PROFILE_USE_CFLAGS)
 AC_SUBST(PROFILE_USE_LDFLAGS)
 
-AC_LANG_CPLUSPLUS
+AC_LANG_PUSH([C++])
 
 dnl ========================================================
 dnl Test for -pedantic bustage
@@ -6784,7 +6784,7 @@
 else
     AC_DEFINE(CPP_THROW_NEW, [throw()])
 fi
-AC_LANG_C
+AC_LANG_POP
 
 dnl ========================================================
 dnl =
@@ -7606,7 +7606,7 @@
 if test -n "$MOZ_CURRENT_PROJECT"; then
     export MOZ_BUILD_APP="$MOZ_CURRENT_PROJECT"
 fi
-AC_OUTPUT_SUBDIRS(mozilla)
+AC_CONFIG_SUBDIRS(mozilla)
 ac_configure_args="$_SUBDIR_CONFIG_ARGS"
 MOZ_BUILD_APP="$MOZ_BUILD_APP_CACHED"
 
@@ -7630,6 +7630,6 @@
         dnl A 64-bit OS was (auto-)detected: (explicitly) enable 64-bit support.
         ac_configure_args="$ac_configure_args --enable-64bit"
     fi
-    AC_OUTPUT_SUBDIRS(directory/c-sdk)
+    AC_CONFIG_SUBDIRS(directory/c-sdk)
     ac_configure_args="$_SUBDIR_CONFIG_ARGS"
 fi # COMPILE_ENVIRONMENT && MOZ_LDAP_XPCOM
